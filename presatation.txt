Modern distributed database systems scale horizontally by partitioning their data across a large number of nodes.
Most such systems build their transactional layers on a replication layer,
employing a consensus protocol to ensure data consistency to achieve fault tolerance.
Synchronization among replicated state machines thus becomes a significant overhead of transaction processing.
Without careful design, synchronization could amplify transactions' lock duration and impair the system's scalability.
A typical GDDP uses 2PL and 2PC to encounter a lot of chatty messages during commit.
And most of the message would be the WAN message.
The two-phase procedure and the consensus protocol amplify lock duration and critical path.
We know that there is a gap between WAN and LAN message latency, 0.1~0.2ms compares to 30~200ms.
Most time, the 2PC enures no WAN latency if the replica leader is in the same AZes.
This encourages us to consider the speculative technique to shorten the critical path.
Our goal is to increase concurrency when encounter locks conflict.
Keep transaction and replication correctness and achieve performance.
The most related work of ours is  Controlled Lock Violation(CLV) of GoetzÂ Graefe et al..
We extend CLV to a new application environment, GDDP, and we call it distributed lock violation(DLV).
We want to know the proper violation time, how DLV adapts to the deadlock handling technique. This is what CLV did not tell us.
First, we want to get correctness criteria for our approach.
Serializability is a correct criterion for transaction processing.
But serializability only tells concurrency control correctness.
Strict is another correctness criteria for transaction processing.
It relates to recovery.
However, strict is not necessarily for correctness.
We choose more loose criteria, recoverability.

